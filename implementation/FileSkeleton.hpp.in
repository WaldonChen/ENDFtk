#ifndef ENDFTK_IMPLEMENTATION_FILESKELETON_HPP
#define ENDFTK_IMPLEMENTATION_FILESKELETON_HPP

#include <unordered_map>

/** @brief Skeleton of a File containing a few pieces to know how to locate
 * it.
 */
template<typename Iterator>
class ENDFtk::implementation::FileSkeleton {
  public:
    FileSkeleton(const HeadRecord& head,
                 Iterator begin, Iterator& position, const Iterator& end, 
                 long& lineNumber );

    //! Return the File identifier (MF) of the skeleton
    int MF() const { return MF_; }
    const SectionSkeleton<Iterator>& operator[] (int MT);

    Iterator begin() const { return begin_; }
    Iterator end() const { return end_; }

    size_t size() const { return sections_.size(); }

    int MF_;          //!< File identifier
    Iterator begin_;  //!< The beginning of the FileSkeleton
    Iterator end_;    //!< The end of the FileSkeleton

    std::unordered_map<int, SectionSkeleton<Iterator> > sections_;
    std::vector<SectionSkeleton<Iterator> > sectionsIndexed_;

};

#include "ENDFtk/implementation/FileSkeleton/src/FileSkeleton.hpp"
#include "ENDFtk/implementation/FileSkeleton/src/operator.hpp"
#endif  // ENDFTK_IMPLEMENTATION_FILESKELETON_HPP

