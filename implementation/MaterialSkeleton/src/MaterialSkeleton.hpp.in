#ifndef ENDFTK_IMPLEMENTATION_MATERIALSKELETON_MATERIALSKELETON_HPP
#define ENDFTK_IMPLEMENTATION_MATERIALSKELETON_MATERIALSKELETON_HPP

namespace ENDFtk {
namespace implementation {

template<typename Iterator>
MaterialSkeleton<Iterator>::MaterialSkeleton(
  const HeadRecord& mHead, 
  Iterator begin, Iterator& position, const Iterator& end, long& lineNumber )
  : begin_(begin)
{
  try{
    FileSkeleton<Iterator> skeletor(mHead, begin, position, end, lineNumber);
    this->files_.emplace_back(skeletor);
    this->MAT_ = mHead.MAT();

    auto MEND = StructureDivision(position, end, lineNumber); 

    while( MEND.tail.MAT() != 0 ){
      if(position >= end){
        LOG(ERROR) << "Material encountered end of stream before reading MEND";
        throw std::exception();
      }
      files_.emplace_back(asHead(MEND), begin, position, end, lineNumber);
      begin = position;
      MEND = StructureDivision(position, end, lineNumber); 
    }
  } catch( std::exception& e ){
    LOG(INFO) << "Trouble when creating a MaterialSkeleton";
    LOG(INFO) << "Line number=" << lineNumber << ", MAT=" << this->MAT_;
    throw e;
  }

  end_ = position;
}

} // namespace implementation
} // namespace ENDFtk

#endif  // ENDFTK_IMPLEMENTATION_MATERIALSKELETON_MATERIALSKELETON_HPP


