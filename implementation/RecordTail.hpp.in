#ifndef ENDFTK_IMPLEMENTATION_RECORDTAIL_HPP
#define ENDFTK_IMPLEMENTATION_RECORDTAIL_HPP

#include "ENDFtk/implementation.hpp"
#include "utility.hpp"

/** @brief Small class to contain the MAT, MF, and MT of a Record */
class ENDFtk::implementation::RecordTail{
public:
  RecordTail( const int MAT, const int MF, const int MT ) :
    material( MAT ), file( MF ), section( MT ) {}

  int material;
  int file;
  int section;
};

namespace ENDFtk {
namespace implementation {

#define DEFINE_VERIFIER( symbol, name ) \
template< typename tail > \
class symbol : public tail { \
public: \
  template< typename... Args > \
  symbol( int name, Args... args ) : tail( std::forward<Args>( args )... ) { \
    if( this->name != name ){ \
      LOG(ERROR) << \
        "The record " #name " number is inconsistent with expectation."; \
      LOG(INFO) << "The read " #name " number is: " << this->name; \
      LOG(INFO) << "The expected " #name " number is: " << name; \
      LOG(INFO) << "Error encountered while verifying record tail values"; \
      throw std::exception(); \
    } \
  } \
};

/** @brief Class to verify an asserted material number value expectation */
DEFINE_VERIFIER( MAT, material )
/** @brief Class to verify an asserted file number value expectation */
DEFINE_VERIFIER( MF, file )
/** @brief Class to verify an asserted section number value expectation */
DEFINE_VERIFIER( MT, section )

#undef DEFINE_VERIFIER

/* specialization of alias templates is forbidden, so heavy lifting is done by 
 * structs
 */
template< template< typename > class... Ts >
struct TailVerifier;

template<>
struct TailVerifier<>{
  using type = RecordTail;
};

template< template< typename > class T1, 
          template< typename > class... Ts >
struct TailVerifier< T1, Ts... >{
  using type = T1< typename TailVerifier< Ts... >::type >;
};

/** @brief An alias declaring which field of a tail ought to be verified */
template< template< typename > class... Ts >
using TailVerifying = typename TailVerifier< Ts... >::type;

} // namespace implementation
} // namespace ENDFtk

#endif  // ENDFTK_IMPLEMENTATION_RECORDTAIL_HPP
