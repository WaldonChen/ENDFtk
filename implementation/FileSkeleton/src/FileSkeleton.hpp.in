#ifndef ENDFTK_IMPLEMENTATION_FILESKELETON_SRC_FILESKELETON_HPP
#define ENDFTK_IMPLEMENTATION_FILESKELETON_SRC_FILESKELETON_HPP

#include "ENDFtk.hpp"

namespace ENDFtk {
namespace implementation {

template<typename Iterator>
FileSkeleton<Iterator>::FileSkeleton(
  const HeadRecord& mHead, 
  Iterator begin, Iterator& position, const Iterator& end, long& lineNumber )
  : begin_(begin)
{
  try{
    SectionSkeleton<Iterator> skeletor(mHead, begin, position, end, lineNumber);
    this->MF_  = mHead.MF();

    this->sections_.emplace_back(skeletor);
    auto FEND = StructureDivision(position, end, lineNumber); 

    while( not FEND.isFend() ){
      if(position >= end){
        LOG(ERROR) << "File encountered end of stream before reading FEND";
        throw std::exception();
      }
      sections_.emplace_back(asHead(FEND), begin, position, end, lineNumber);
      begin = position;
      FEND = StructureDivision(position, end, lineNumber); 
    }
  } catch( std::exception& e ){
    LOG(INFO) << "Trouble when creating a FileSkeleton";
    LOG(INFO) << "Line number=" << lineNumber << ", MF=" << this->MF_;
    throw e;
  }

  end_ = position;
}

} // namespace implementation
} // namespace ENDFtk
#endif  // ENDFTK_IMPLEMENTATION_FILESKELETON_SRC_FILESKELETON_HPP

