#ifndef ENDFTK_IMPLEMENTATION_SECTIONSKELETON_SRC_SECTIONSKELETON_HPP
#define ENDFTK_IMPLEMENTATION_SECTIONSKELETON_SRC_SECTIONSKELETON_HPP

#include "ENDFtk.hpp"

namespace ENDFtk {
namespace implementation {

template<typename Iterator>
SectionSkeleton<Iterator>::SectionSkeleton(Iterator& begin, const Iterator& end, 
                                           long& lineNumber )
  : begin_(begin)
{
  try{
    record::Tail tail(0,0,0);
    do{
      tail = record::skip(begin, end, lineNumber);
    } while( tail.MT() != 0 );
  } catch( std::exception& e ){
    LOG(ERROR) << "Trouble when creating a SectionSkeleton";
    throw e;
  }

  end_ = begin;
}

} // namespace implementation
} // namespace ENDFtk
#endif  // ENDFTK_IMPLEMENTATION_SECTIONSKELETON_SRC_SECTIONSKELETON_HPP

// {
//   try{
//     auto tail(0,0,0);
//     do{
//       LOG(INFO) << "first entry of line: "
//                 << std::string(begin, std::next(begin, 10) );
//       tail = record::skip(begin, end, lineNumber);
//     } while( tail.MT() != 0 );
//     LOG(INFO) "begin == end ? " << ( begin == end ? "true" : "false";
//   } catch( std::exception& e ){
//     LOG(ERROR) << "Trouble when creating a SectionSkelton";
//     throw e;
//   }
//   end_ = begin;
// }

