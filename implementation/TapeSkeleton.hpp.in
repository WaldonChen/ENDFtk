#ifndef ENDFTK_IMPLEMENTATION_TAPESKELETON_HPP
#define ENDFTK_IMPLEMENTATION_TAPESKELETON_HPP

/** @brief Skeleton of a Tape containing a few pieces to know how to locate
 * it.
 */
template<typename Iterator>
class ENDFtk::implementation::TapeSkeleton {
  public:
    using MaterialSkeleton_t = MaterialSkeleton<Iterator>;

    TapeSkeleton(Iterator& begin, const Iterator& end, long& LN );

    const MaterialSkeleton<Iterator>& operator[] (int index);

    Iterator begin() const { return begin_; }
    Iterator end() const { return end_; }

    size_t size() const { return materials_.size(); }

    Iterator begin_;  //!< The beginning of the TapeSkeleton
    Iterator end_;    //!< The end of the TapeSkeleton

    std::vector<MaterialSkeleton_t> materialsIndexed_;
    std::unordered_multimap<int, MaterialSkeleton_t&> materials_;

private:
  static std::vector<MaterialSkeleton_t>
  createIndexedVector( Iterator& begin, const Iterator& end, long& LN);

  static std::unordered_multimap<int, MaterialSkeleton_t&>
  createMaterialsMap(std::vector<MaterialSkeleton_t>& indeed);
};

#include "ENDFtk/implementation/TapeSkeleton/src/TapeSkeleton.hpp"
#include "ENDFtk/implementation/TapeSkeleton/src/createIndexedVector.hpp"
#include "ENDFtk/implementation/TapeSkeleton/src/createMaterialsMap.hpp"
#include "ENDFtk/implementation/TapeSkeleton/src/operator.hpp"

#endif  // ENDFTK_IMPLEMENTATION_TAPESKELETON_HPP

